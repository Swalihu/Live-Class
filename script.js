 
       function checkEnter(event) { if (event.key === 'Enter') { sendMessage(); } 
        };
        
        function sendMessage() {
    const userInput = document.getElementById("user-input");
    const message = userInput.value.trim();

    if (message !== "") {
        displayMessage(message, "user");
        userInput.value = "";
    }
}

function displayMessage(message, sender) {
    const chatHistory = document.querySelector(".chat-history");
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${sender}`;
    messageDiv.textContent = message;
    chatHistory.appendChild(messageDiv);
    chatHistory.scrollTop = chatHistory.scrollHeight;
};


function Video() {
    
const localVideo1 = document.getElementById('localVideo1');
const localVideo2 = document.getElementById('localVideo2');
const remoteVideo = document.getElementById('remoteVideo');

// Get user media (audio and video)
navigator.mediaDevices.getUserMedia({ video: true, audio: false })
  .then(stream => {
    // Display local video stream
    localVideo1.srcObject = stream;
    localVideo2.srcObject = stream;

    // Create a new RTCPeerConnection
    const peerConnection = new RTCPeerConnection();

    // Add the local stream to the peer connection
    stream.getTracks().forEach(track => {
      peerConnection.addTrack(track, stream);
    });
    

    // Handle incoming remote streams
    peerConnection.ontrack = event => {
      remoteVideo.srcObject = event.streams[0];
    };

    // Create an offer and set it as the local description
    peerConnection.createOffer()
      .then(offer => peerConnection.setLocalDescription(offer))
      .then(() => {
        // Send the offer to other users via signaling server (e.g., WebSocket)
        const offerDescription = peerConnection.localDescription;
        // Send offerDescription to other users...
      });

    // Handle incoming offers from other users
    function handleOffer(offerDescription) {
      // Create a new RTCPeerConnection
      const peerConnection = new RTCPeerConnection();

      // Add the local stream to the peer connection
      stream.getTracks().forEach(track => {
        peerConnection.addTrack(track, stream);
      });

      // Set the remote description as the received offer
      peerConnection.setRemoteDescription(offerDescription);

      // Create an answer and set it as the local description
      peerConnection.createAnswer()
        .then(answer => peerConnection.setLocalDescription(answer))
        .then(() => {
          // Send the answer to other users via signaling server (e.g., WebSocket)
          const answerDescription = peerConnection.localDescription;
          // Send answerDescription to other users...
        });

      // Handle incoming answers from other users
      function handleAnswer(answerDescription) {
        // Set the remote description as the received answer
        peerConnection.setRemoteDescription(answerDescription);
      }

      // Handle ICE candidates received from other users via signaling server
      function handleCandidate(candidate) {
        const iceCandidate = new RTCIceCandidate(candidate);
        peerConnection.addIceCandidate(iceCandidate);
      }
    }

    // Handle ICE candidates generated by the browser
    peerConnection.onicecandidate = event => {
      if (event.candidate) {
        // Send ICE candidate to other users via signaling server (e.g., WebSocket)
        const candidate = event.candidate;
        // Send candidate to other users...
      }
    };

    // Handle ICE candidates received from other users via signaling server
    function handleCandidate(candidate) {
      const iceCandidate = new RTCIceCandidate(candidate);
      peerConnection.addIceCandidate(iceCandidate);
    }
  })
  .catch(error => console.error(error));

 };
 Video();
